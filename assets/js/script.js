// ---
// Змінні та типи даних у JavaScript
//
// Змінна — це іменований контейнер для зберігання даних. Вона дозволяє зберігати, змінювати та використовувати значення у програмі.
// Оголошення змінної: let, const або var
//
// let a = 5; // змінна з числовим значенням (тип number)
// const name = "Dima"; // змінна з рядковим значенням (тип string)
// var flag = true; // булевий тип (true/false)
//
// Основні типи даних у JavaScript:
// - Number: числа (5, 3.14)
// - String: рядки ("Hello", 'world')
// - Boolean: логічний тип (true, false)
// - Undefined: змінна оголошена, але не має значення
// - Null: "порожнє" значення
// - Object: складна структура для зберігання даних (масиви, об'єкти)
// - Symbol, BigInt: спеціальні типи (рідко використовуються)
//
// Приклад:
// let age = 30; // Number
// let user = {name: "Anna"}; // Object
// let isActive = false; // Boolean
// let nothing = null; // Null
// let notDefined; // Undefined
//
// typeof дозволяє дізнатися тип даних:
// console.log(typeof age); // "number"
// console.log(typeof user); // "object"
// console.log(typeof isActive); // "boolean"
// ---

// ---
// Оператори, умовні конструкції та цикли у JavaScript
//
// Оператори:
// Арифметичні оператори дозволяють виконувати математичні дії:
// + (додавання), - (віднімання), * (множення), / (ділення), % (остача від ділення), ++ (інкремент), -- (декремент)
// let x = 10 + 5; // 15 (додавання)
// let y = x * 2; // 30 (множення)
// let z = y % 4; // 2 (остача від ділення)
// x++; // x = 16 (збільшення на 1)
//
// Оператори порівняння використовуються для порівняння значень:
// > (більше), < (менше), >= (більше або дорівнює), <= (менше або дорівнює), == (нестроге рівність), === (строге рівність), != (нестроге нерівність), !== (строге нерівність)
// console.log(5 > 3); // true (5 більше за 3)
// console.log(5 == '5'); // true (значення рівні, тип ігнорується)
// console.log(5 === '5'); // false (типи різні: число і рядок)
//
// Логічні оператори дозволяють комбінувати умови:
// && (і) — true, якщо обидві умови істинні
// || (або) — true, якщо хоча б одна умова істинна
// ! (не) — інвертує значення
// console.log(true && false); // false (обидва мають бути true)
// console.log(true || false); // true (достатньо одного true)
// console.log(!true); // false (інверсія)
//
// Умовні конструкції:
// if, else if, else — дозволяють виконувати різний код залежно від умови
// let age = 18;
// if (age >= 18) {
//   console.log('Дорослий'); // Виконається, якщо age >= 18
// } else {
//   console.log('Дитина'); // Виконається, якщо age < 18
// }
//
// switch — зручно для перевірки кількох значень однієї змінної
// switch (age) {
//   case 18:
//     console.log('Вам 18!'); // Виконається, якщо age === 18
//     break;
//   case 21:
//     console.log('Вам 21!'); // Виконається, якщо age === 21
//     break;
//   default:
//     console.log('Інший вік'); // Виконається, якщо жоден case не підходить
// }
//
// Цикли:
// for — використовується для повторення дій певну кількість разів
// for (let i = 0; i < 5; i++) {
//   console.log('i =', i); // Виведе числа від 0 до 4
// }
//
// while — виконує блок коду, поки умова істинна
// let j = 0;
// while (j < 3) {
//   console.log('j =', j); // Виведе 0, 1, 2
//   j++;
// }
//
// do...while — спочатку виконує код, потім перевіряє умову
// let k = 0;
// do {
//   console.log('k =', k); // Виведе 0, 1
//   k++;
// } while (k < 2);
// ---

// ---
// Детальніше про умовні конструкції та цикли у JavaScript
//
// if — перевіряє умову. Якщо вона істинна (true), виконується блок коду після if.
// if (умова) {
//   // цей код виконається, якщо умова true
// }
//
// if...else — якщо умова false, виконається блок після else.
// let age = 16;
// if (age >= 18) {
//   console.log('Дорослий'); // не виконається
// } else {
//   console.log('Дитина'); // виконається, бо age < 18
// }
//
// if...else if...else — можна перевіряти кілька умов послідовно:
// let score = 75;
// if (score >= 90) {
//   console.log('Відмінно');
// } else if (score >= 60) {
//   console.log('Добре'); // виконається, бо 75 >= 60
// } else {
//   console.log('Потрібно підтягнути');
// }
//
// Як працюють цикли:
// for — виконує код певну кількість разів. Складається з 3 частин:
// for (початкове значення; умова; крок) {
//   // код, який повторюється
// }
//
// for (let i = 0; i < 3; i++) {
//   // i = 0: умова true, виконується код, i++ (i=1)
//   // i = 1: умова true, виконується код, i++ (i=2)
//   // i = 2: умова true, виконується код, i++ (i=3)
//   // i = 3: умова false, цикл завершується
//   console.log('i =', i);
// }
//
// while — перевіряє умову перед кожною ітерацією:
// let j = 0;
// while (j < 2) {
//   // j = 0: умова true, виконується код, j++ (j=1)
//   // j = 1: умова true, виконується код, j++ (j=2)
//   // j = 2: умова false, цикл завершується
//   console.log('j =', j);
//   j++;
// }
//
// do...while — спочатку виконує код, потім перевіряє умову:
// let k = 0;
// do {
//   // k = 0: виконується код, k++ (k=1), перевіряється умова
//   // k = 1: виконується код, k++ (k=2), перевіряється умова
//   // k = 2: умова false, цикл завершується
//   console.log('k =', k);
//   k++;
// } while (k < 2);
// ---

// ---
// Додаткові цикли: forEach, for...in, for...of
//
// forEach — це метод масиву, який викликає передану функцію для кожного елемента масиву.
// Він не повертає новий масив, а просто виконує дію для кожного елемента.
// Синтаксис: arr.forEach(function(item, index, array) { ... });
//
// 1. Простий приклад:
// let arr = [10, 20, 30];
// arr.forEach(function(item) {
//   console.log('Елемент:', item);
// });
// // Виведе:
// // Елемент: 10
// // Елемент: 20
// // Елемент: 30
//
// 2. З індексом:
// arr.forEach(function(item, index) {
//   console.log('Елемент:', item, 'Індекс:', index);
// });
// // Виведе:
// // Елемент: 10 Індекс: 0
// // Елемент: 20 Індекс: 1
// // Елемент: 30 Індекс: 2
//
// 3. З доступом до всього масиву:
// arr.forEach(function(item, index, array) {
//   console.log('Елемент:', item, 'Індекс:', index, 'Масив:', array);
// });
//
// 4. Стрілочна функція:
// arr.forEach((item, index) => {
//   console.log(`Елемент №${index + 1}: ${item}`);
// });
//
// 5. Приклад: вивести квадрат кожного числа
// let numbers = [2, 4, 6];
// numbers.forEach(function(num) {
//   console.log(num * num);
// });
// // Виведе: 4, 16, 36
// ---