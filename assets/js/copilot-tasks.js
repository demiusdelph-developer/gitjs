// Завдання для практики — на основі тем з `assets/js/script.js`
// Виконай кожне завдання в цьому файлі або в новому файлі, нумеруй свої рішення під відповідним завданням.
// Кожне завдання має короткий контракт: вхід / очікуваний вихід / прості крайні випадки.

// 1) Змінні і типи
// Функція: declareAndLog
// Вхід: нічого
// Вихід: створити три змінні (number, string, boolean) і вивести їх типи в консоль.
// Крайні випадки: переконайся, що використовуються let/const правильно.

// 2) Арифметичні оператори
// Функція: computeStats(numbers)
// Вхід: масив чисел
// Вихід: об'єкт {sum, avg, min, max, remainderOfFirstBySecond}
// Крайні випадки: порожній масив => повертати null або повідомлення.

// 3) Порівняння і логічні оператори
// Функція: compareValues(a, b)
// Вхід: два значення
// Вихід: об'єкт з полями {equalLoose, equalStrict, bothTruthy}
// Крайні випадки: різні типи, null/undefined.

// 4) Умовні конструкції (if / else / else if)
// Функція: gradeResult(score)
// Вхід: число (0-100)
// Вихід: рядок: 'Відмінно' (>=90), 'Добре' (>=60), 'Потрібно підтягнути' (інакше)
// Крайні випадки: менше 0 або більше 100 — валідну обробку.

// 5) switch
// Функція: dayName(number)
// Вхід: ціле 1..7
// Вихід: назва дня тижня (укр.), якщо поза діапазоном — "Невідомий день"

// 6) for цикл
// Функція: sumEvenToN(n)
// Вхід: ціле n
// Вихід: сума всіх парних чисел від 0 до n (включно)

// 7) while та do...while
// Функція: reverseStringLoop(str)
// Вхід: рядок
// Вихід: рядок — перевернутий str (реалізувати один раз через while, один раз через do...while)

// 8) Масиви і forEach
// Функція: mapToSquares(arr)
// Вхід: масив чисел
// Вихід: новий масив з квадратами чисел (не використовувати map — реалізувати через forEach)

// 9) Функції: declaration, expression, arrow
// Завдання: реалізуй три функції, що роблять те саме:
// - function declGreet(name) { ... }
// - const exprGreet = function(name) { ... }
// - const arrowGreet = (name) => { ... }
// Всі повинні повертати рядок `Вітаю, ${name}!`.

// 10) Scope і замикання
// Функція: makeCounter()
// Вхід: нічого
// Вихід: повернути функцію, яка при кожному виклику повертає наступне число (1,2,3...)
// Перевір: створити два різні лічильники — вони повинні працювати незалежно.

// 11) this і bind/call/apply
// Завдання: створи об'єкт user = {name: 'Ім'я', show: function() { ... }}
// Потім: витягни метод у змінну і спробуй виклик — опиши результат.
// Далі: використай call/apply/bind, щоб явно встановити this і викликати метод для іншого об'єкта.

// 12) Конструктор і клас
// Завдання: реалізуй конструктор Car(brand, year) і клас Bike з тим же API (brand, year, info())
// Перевір: створити екземпляри і викликати info(), показати різницю синтаксисів.

// 13) for...in і for...of
// Завдання: маючи масив arr = ['a','b','c'] і об'єкт obj = {a:1,b:2},
// - використай for...of для масиву; для кожного елемента додай префікс 'el:'
// - використай for...in для об'єкта; зберігай ключі і значення в масив пар.

// 14) Маленький комплексний таск
// Функція: buildReport(users)
// Вхід: масив об'єктів {name, scores:[...numbers]}
// Вихід: масив рядків "<name>: avg=<average>, best=<max>"
// Використай: масивні цикли, forEach, функції, і обробку пустих масивів.

// Порада: додай під кожним завданням свій варіант реалізації або коментарі з перевіркою у консолі.

// Коли закінчиш, скажи, чи бажаєш — додам автоматичні тести або готові розв'язки.

